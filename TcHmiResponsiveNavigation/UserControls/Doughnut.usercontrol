<div id="Doughnut" data-tchmi-type="TcHmi.Controls.System.TcHmiUserControl" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="100" data-tchmi-height="100" data-tchmi-width-unit="%" data-tchmi-height-unit="%" data-tchmi-creator-viewport-width="500" data-tchmi-creator-viewport-height="500">

    <div id="chartJSHost" data-tchmi-type="TcHmi.Controls.System.TcHmiHtmlHost" data-tchmi-height-unit="px" data-tchmi-left="0" data-tchmi-left-unit="px" data-tchmi-top="0" data-tchmi-top-unit="px" data-tchmi-width-unit="px" data-tchmi-right="0" data-tchmi-bottom="0">
            <canvas id="chart-area"></canvas>
        
<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "chartJSHost.onAttached",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "// Ricerca host\nvar chartjsHost = document.getElementById('chart-area').getContext('2d');\n\nvar config = {\n\ttype: 'doughnut',\n\tdata: {\n\t\tdatasets: [{\n\t\t\tdata: [\n\t\t\t\t1, 1, 1, 1, 1\n\t\t\t],\n\t\t\tbackgroundColor: [\n\t\t\t\t'red',\n\t\t\t\t'orange',\n\t\t\t\t'yellow',\n\t\t\t\t'green',\n\t\t\t\t'blue',\n\t\t\t],\n\t\t\tlabel: 'Dataset 1'\n\t\t}],\n\t\tlabels: [\n\t\t\t'Red',\n\t\t\t'Orange',\n\t\t\t'Yellow',\n\t\t\t'Green',\n\t\t\t'Blue'\n\t\t]\n\t},\n\toptions: {\n\t\tresponsive: true,\n\t\tlegend: {\n\t\t\tposition: 'top',\n\t\t},\n\t\ttitle: {\n\t\t\tdisplay: true,\n\t\t\ttext: 'Chart.js Doughnut Chart'\n\t\t},\n\t\tanimation: {\n\t\t\tanimateScale: false,\n\t\t\tanimateRotate: false\n\t\t}\n\t}\n};\n;\n// Creazione chart\nchartjsHost.chart = new Chart(chartjsHost, config);\n\n// Monitoraggio simboli\nvar valueNames = ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'];\nvar otherNames = ['Title_Text'];\nvar labelNames = ['Data1_Label', 'Data2_Label', 'Data3_Label', 'Data4_Label', 'Data5_Label'];\nvar names = [...valueNames, ...otherNames, ...labelNames]; \n\nvar updateData = function (v) {\n\tconsole.log('updateData');\n\tvar dataset = chartjsHost.chart.data.datasets[0];\n\tvar options = chartjsHost.chart.options;\n\tvar labels = chartjsHost.chart.data.labels;\n\t\n\t\n\t// Svuoto l'array dei dati\n\tdataset.data.splice(0, dataset.data.length);\n\tdataset.data.push(...valueNames.map(n => new TcHmi.Symbol('%pp%' + n + '%/pp%').read()));\t\n\n\toptions.title.text = new TcHmi.Symbol('%pp%' + 'Title_Text' + '%/pp%').read(); //'Titolo';\n\t\n\t\n\t//labels.splice(0, labels.length);\n\t//labels.push(...labelNames.map(n => newTcHmi.Symbol('%pp%' + n + '%/pp%').read()));\n\t//console.log(labels);\n\t\n\tlabels[0] = new TcHmi.Symbol('%pp%' + labelNames[0] + '%/pp%').read();\n\tlabels[1] = new TcHmi.Symbol('%pp%' + labelNames[1] + '%/pp%').read();\n\tlabels[2] = new TcHmi.Symbol('%pp%' + labelNames[2] + '%/pp%').read();\n\tlabels[3] = new TcHmi.Symbol('%pp%' + labelNames[3] + '%/pp%').read();\n\tlabels[4] = new TcHmi.Symbol('%pp%' + labelNames[4] + '%/pp%').read();\n\t\n\t\n\t// Aggiorno il grafico\n\tchartjsHost.chart.update();\n};\n\nfor (var x = 0; x < names.length; x++) {\n\tvar symbol = new TcHmi.Symbol('%pp%' + names[x] + '%/pp%');\n    var destroySymbol = symbol.watch(updateData);\n}\n\n"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
</div>