<div id="EventGridSample" data-tchmi-type="TcHmi.Controls.System.TcHmiContent" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="800" data-tchmi-height="640" data-tchmi-width-mode="Parent" data-tchmi-height-mode="Parent" data-tchmi-right="0" data-tchmi-bottom="0">

<div id="TcHmiEventGrid" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiEventGrid" data-tchmi-height="400" data-tchmi-height-unit="px" data-tchmi-left="0" data-tchmi-left-unit="px" data-tchmi-show-menu-bar="False" data-tchmi-top="10" data-tchmi-top-unit="px" data-tchmi-width-unit="px" data-tchmi-width="926" data-tchmi-is-enabled="True" data-tchmi-width-mode="Parent" data-tchmi-height-mode="Parent" data-tchmi-right="0" data-tchmi-bottom="30" data-tchmi-bottom-unit="%" data-tchmi-menu-bar-position="Top">
<script data-tchmi-target-attribute="data-tchmi-filter" type="application/json">
[
  {
    "path": "domain",
    "comparator": "==",
    "value": "TcHmiEventLogger"
  }
]
</script>
<script data-tchmi-target-attribute="data-tchmi-columns" type="application/json">
[
  {
    "columnName": "type"
  },
  {
    "columnName": "severity"
  },
  {
    "columnName": "timeAndDateRaised"
  },
  {
    "columnName": "text"
  },
  {
    "columnName": "timeAndDateConfirmed"
  },
  {
    "columnName": "timeAndDateCleared"
  },
  {
    "columnName": "domain"
  }
]
</script>

</div>

<div id="TcHmiButton_6" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="11" data-tchmi-left-unit="px" data-tchmi-top="72" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-state-symbol="%s%PLC1.MAIN_1.bMessage%/s%" data-tchmi-text="%l%L_SendMessage%/l%">

</div>

<div id="TcHmiButton_7" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="121" data-tchmi-left-unit="px" data-tchmi-top="72" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-state-symbol="%s%PLC1.MAIN_1.bAlarm%/s%" data-tchmi-text="%l%L_RaiseAlarm%/l%">

</div>

<div id="TcHmiButton_8" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="231" data-tchmi-left-unit="px" data-tchmi-text="%l%L_ClearAlarm%/l%" data-tchmi-top="72" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-state-symbol="%s%PLC1.MAIN_1.bClearAlarm%/s%">

</div>

<div id="TcHmiToggleButtonAll" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiToggleButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="619" data-tchmi-left-unit="px" data-tchmi-text="%l%L_AllEvents%/l%" data-tchmi-top="72" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-toggle-group="ShowAlarms" data-tchmi-toggle-state="Active">




<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">[
  {
    "event": "TcHmiToggleButtonAll.onToggleStateChanged",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "asyncWait": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "symbolExpression": "%ctrl%TcHmiToggleButtonAll::ToggleState%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/ToggleState",
                  "value": "Active"
                },
                "compareOperator": "==",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
                "valueType": "tchmi:server#/definitions/eventFilter",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:server#/definitions/eventFilter",
                  "value": [
                    {
                      "path": "domain",
                      "comparator": "==",
                      "value": "TcHmiEventLogger"
                    }
                  ]
                },
                "asyncWait": true
              }
            ]
          }
        ]
      }
    ]
  }
]</script>
</div>

<div id="TcHmiToggleButtonActive" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiToggleButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="509" data-tchmi-left-unit="px" data-tchmi-text="%l%L_Active%/l%" data-tchmi-top="72" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-toggle-group="ShowAlarms" data-tchmi-toggle-state="Normal">




<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">[
  {
    "event": "TcHmiToggleButtonActive.onToggleStateChanged",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "asyncWait": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "symbolExpression": "%ctrl%TcHmiToggleButtonActive::ToggleState%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/ToggleState",
                  "value": "Active"
                },
                "compareOperator": "==",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
                "valueType": "tchmi:server#/definitions/eventFilter",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:server#/definitions/eventFilter",
                  "value": [
                    {
                      "path": "domain",
                      "comparator": "==",
                      "value": "TcHmiEventLogger"
                    },
                    {
                      "logic": "AND"
                    },
                    {
                      "path": "type",
                      "comparator": "==",
                      "value": 1
                    },
                    {
                      "logic": "AND"
                    },
                    {
                      "path": "confirmationState",
                      "comparator": "==",
                      "value": 2
                    }
                  ]
                },
                "asyncWait": true
              }
            ]
          }
        ]
      }
    ]
  }
]</script>
</div>

<div id="TcHmiCombobox" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiCombobox" data-tchmi-combobox-text="%l%L_Language%/l%" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="10" data-tchmi-left-unit="px" data-tchmi-top="80" data-tchmi-top-unit="%" data-tchmi-width="321" data-tchmi-width-unit="px" data-tchmi-src-data="%f%GetRegisteredLocales()%/f%" data-tchmi-width-mode="Value" data-tchmi-height-mode="Value">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>




<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiCombobox.onSelectionChanged",
    "actions": [
      {
        "objectType": "SwitchCase",
        "active": true,
        "compare": {
          "objectType": "Symbol",
          "valueType": "tchmi:general#/definitions/String",
          "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
        },
        "cases": [
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UDINT",
              "value": 0
            },
            "actions": [
              {
                "objectType": "Function",
                "active": true,
                "fn": "TcHmi.Functions.Beckhoff.SetLocale",
                "fnParams": [
                  {
                    "objectType": "StaticValue",
                    "valueType": "tchmi:general#/definitions/ProjectLocale",
                    "value": "it-IT"
                  }
                ],
                "asyncWait": true
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UDINT",
              "value": 1
            },
            "actions": [
              {
                "objectType": "Function",
                "active": true,
                "fn": "TcHmi.Functions.Beckhoff.SetLocale",
                "fnParams": [
                  {
                    "objectType": "StaticValue",
                    "valueType": "tchmi:general#/definitions/ProjectLocale",
                    "value": "de-DE"
                  }
                ],
                "asyncWait": true
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UDINT",
              "value": 2
            },
            "actions": [
              {
                "objectType": "Function",
                "active": true,
                "fn": "TcHmi.Functions.Beckhoff.SetLocale",
                "fnParams": [
                  {
                    "objectType": "StaticValue",
                    "valueType": "tchmi:general#/definitions/ProjectLocale",
                    "value": "en-US"
                  }
                ],
                "asyncWait": true
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>

</div>